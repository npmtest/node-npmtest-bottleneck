{"/home/travis/build/npmtest/node-npmtest-bottleneck/test.js":"/* istanbul instrument in package npmtest_bottleneck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bottleneck/lib.npmtest_bottleneck.js":"/* istanbul instrument in package npmtest_bottleneck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bottleneck = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bottleneck = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bottleneck/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bottleneck && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bottleneck */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bottleneck\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bottleneck.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bottleneck.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bottleneck.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bottleneck.__dirname + '/lib.npmtest_bottleneck.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bottleneck/node_modules/bottleneck/lib/index.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  module.exports = require(\"./Bottleneck\");\n\n  if (global.window != null) {\n    global.window.Bottleneck = module.exports;\n  }\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-bottleneck/node_modules/bottleneck/lib/Bottleneck.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var Bottleneck, MIDDLE_PRIORITY, NB_PRIORITIES,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    slice = [].slice;\n\n  NB_PRIORITIES = 10;\n\n  MIDDLE_PRIORITY = 5;\n\n  Bottleneck = (function() {\n    var e;\n\n    Bottleneck.strategy = Bottleneck.prototype.strategy = {\n      LEAK: 1,\n      OVERFLOW: 2,\n      OVERFLOW_PRIORITY: 4,\n      BLOCK: 3\n    };\n\n    Bottleneck.Cluster = Bottleneck.prototype.Cluster = require(\"./Cluster\");\n\n    Bottleneck.DLList = Bottleneck.prototype.DLList = require(\"./DLList\");\n\n    Bottleneck.Promise = Bottleneck.prototype.Promise = (function() {\n      try {\n        return require(\"bluebird\");\n      } catch (error) {\n        e = error;\n        return typeof Promise !== \"undefined\" && Promise !== null ? Promise : function() {\n          throw new Error(\"Bottleneck: install 'bluebird' or use Node 0.12 or higher for Promise support\");\n        };\n      }\n    })();\n\n    function Bottleneck(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb != null ? maxNb : 0;\n      this.minTime = minTime != null ? minTime : 0;\n      this.highWater = highWater != null ? highWater : -1;\n      this.strategy = strategy != null ? strategy : Bottleneck.prototype.strategy.LEAK;\n      this.rejectOnDrop = rejectOnDrop != null ? rejectOnDrop : false;\n      this.schedulePriority = bind(this.schedulePriority, this);\n      this.submitPriority = bind(this.submitPriority, this);\n      this.submit = bind(this.submit, this);\n      this._nextRequest = Date.now();\n      this._nbRunning = 0;\n      this._queues = this._makeQueues();\n      this._running = {};\n      this._nextIndex = 0;\n      this._unblockTime = 0;\n      this.penalty = (15 * this.minTime) || 5000;\n      this.interrupt = false;\n      this.reservoir = null;\n      this.limiter = null;\n      this.events = {};\n    }\n\n    Bottleneck.prototype._trigger = function(name, args) {\n      if (this.rejectOnDrop && name === \"dropped\") {\n        args[0].cb.apply({}, [new Error(\"This job has been dropped by Bottleneck\")]);\n      }\n      return setTimeout(((function(_this) {\n        return function() {\n          var ref;\n          return (ref = _this.events[name]) != null ? ref.forEach(function(e) {\n            return e.apply({}, args);\n          }) : void 0;\n        };\n      })(this)), 0);\n    };\n\n    Bottleneck.prototype._makeQueues = function() {\n      var i, j, ref, results;\n      results = [];\n      for (i = j = 1, ref = NB_PRIORITIES; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n        results.push(new Bottleneck.prototype.DLList());\n      }\n      return results;\n    };\n\n    Bottleneck.prototype.chain = function(limiter) {\n      this.limiter = limiter;\n      return this;\n    };\n\n    Bottleneck.prototype.isBlocked = function() {\n      return this._unblockTime >= Date.now();\n    };\n\n    Bottleneck.prototype._sanitizePriority = function(priority) {\n      var sProperty;\n      sProperty = ~~priority !== priority ? MIDDLE_PRIORITY : priority;\n      if (sProperty < 0) {\n        return 0;\n      } else if (sProperty > NB_PRIORITIES - 1) {\n        return NB_PRIORITIES - 1;\n      } else {\n        return sProperty;\n      }\n    };\n\n    Bottleneck.prototype._find = function(arr, fn) {\n      var i, j, len, x;\n      for (i = j = 0, len = arr.length; j < len; i = ++j) {\n        x = arr[i];\n        if (fn(x)) {\n          return x;\n        }\n      }\n      return [];\n    };\n\n    Bottleneck.prototype.nbQueued = function(priority) {\n      if (priority != null) {\n        return this._queues[this._sanitizePriority(priority)].length;\n      } else {\n        return this._queues.reduce((function(a, b) {\n          return a + b.length;\n        }), 0);\n      }\n    };\n\n    Bottleneck.prototype.nbRunning = function() {\n      return this._nbRunning;\n    };\n\n    Bottleneck.prototype._getFirst = function(arr) {\n      return this._find(arr, function(x) {\n        return x.length > 0;\n      });\n    };\n\n    Bottleneck.prototype._conditionsCheck = function() {\n      return (this.nbRunning() < this.maxNb || this.maxNb <= 0) && ((this.reservoir == null) || this.reservoir > 0);\n    };\n\n    Bottleneck.prototype.check = function() {\n      return this._conditionsCheck() && (this._nextRequest - Date.now()) <= 0;\n    };\n\n    Bottleneck.prototype._tryToRun = function() {\n      var done, index, next, queued, wait;\n      if (this._conditionsCheck() && (queued = this.nbQueued()) > 0) {\n        this._nbRunning++;\n        if (this.reservoir != null) {\n          this.reservoir--;\n        }\n        wait = Math.max(this._nextRequest - Date.now(), 0);\n        this._nextRequest = Date.now() + wait + this.minTime;\n        next = (this._getFirst(this._queues)).shift();\n        if (queued === 1) {\n          this._trigger(\"empty\", []);\n        }\n        done = false;\n        index = this._nextIndex++;\n        this._running[index] = {\n          timeout: setTimeout((function(_this) {\n            return function() {\n              var completed;\n              completed = function() {\n                var ref;\n                if (!done) {\n                  done = true;\n                  delete _this._running[index];\n                  _this._nbRunning--;\n                  _this._tryToRun();\n                  if (_this.nbRunning() === 0 && _this.nbQueued() === 0) {\n                    _this._trigger(\"idle\", []);\n                  }\n                  if (!_this.interrupt) {\n                    return (ref = next.cb) != null ? ref.apply({}, Array.prototype.slice.call(arguments, 0)) : void 0;\n                  }\n                }\n              };\n              if (_this.limiter != null) {\n                return _this.limiter.submit.apply(_this.limiter, Array.prototype.concat(next.task, next.args, completed));\n              } else {\n                return next.task.apply({}, next.args.concat(completed));\n              }\n            };\n          })(this), wait),\n          job: next\n        };\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    Bottleneck.prototype.submit = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return this.submitPriority.apply({}, Array.prototype.concat(MIDDLE_PRIORITY, args));\n    };\n\n    Bottleneck.prototype.submitPriority = function() {\n      var args, cb, j, job, priority, reachedHighWaterMark, shifted, task;\n      priority = arguments[0], task = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, j = arguments.length - 1) : (j = 2, []), cb = arguments[j++];\n      job = {\n        task: task,\n        args: args,\n        cb: cb\n      };\n      priority = this._sanitizePriority(priority);\n      reachedHighWaterMark = this.highWater >= 0 && this.nbQueued() === this.highWater && !this.check();\n      if (this.strategy === Bottleneck.prototype.strategy.BLOCK && (reachedHighWaterMark || this.isBlocked())) {\n        this._unblockTime = Date.now() + this.penalty;\n        this._nextRequest = this._unblockTime + this.minTime;\n        this._queues = this._makeQueues();\n        this._trigger(\"dropped\", [job]);\n        return true;\n      } else if (reachedHighWaterMark) {\n        shifted = this.strategy === Bottleneck.prototype.strategy.LEAK ? (this._getFirst(this._queues.slice(priority).reverse())).shift() : this.strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? (this._getFirst(this._queues.slice(priority + 1).reverse())).shift() : this.strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;\n        if (shifted != null) {\n          this._trigger(\"dropped\", [shifted]);\n        }\n        if ((shifted == null) || this.strategy === Bottleneck.prototype.strategy.OVERFLOW) {\n          return reachedHighWaterMark;\n        }\n      }\n      this._queues[priority].push(job);\n      this._tryToRun();\n      return reachedHighWaterMark;\n    };\n\n    Bottleneck.prototype.schedule = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return this.schedulePriority.apply({}, Array.prototype.concat(MIDDLE_PRIORITY, args));\n    };\n\n    Bottleneck.prototype.schedulePriority = function() {\n      var args, priority, task, wrapped;\n      priority = arguments[0], task = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n      wrapped = function() {\n        var args, cb, j;\n        args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), cb = arguments[j++];\n        return (task.apply({}, args)).then(function() {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return cb.apply({}, Array.prototype.concat(null, args));\n        })[\"catch\"](function() {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return cb.apply({}, args);\n        });\n      };\n      return new Bottleneck.prototype.Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.submitPriority.apply({}, Array.prototype.concat(priority, wrapped, args, function() {\n            var args;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            return (args[0] != null ? reject : (args.shift(), resolve)).apply({}, args);\n          }));\n        };\n      })(this));\n    };\n\n    Bottleneck.prototype.changeSettings = function(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb != null ? maxNb : this.maxNb;\n      this.minTime = minTime != null ? minTime : this.minTime;\n      this.highWater = highWater != null ? highWater : this.highWater;\n      this.strategy = strategy != null ? strategy : this.strategy;\n      this.rejectOnDrop = rejectOnDrop != null ? rejectOnDrop : this.rejectOnDrop;\n      while (this._tryToRun()) {}\n      return this;\n    };\n\n    Bottleneck.prototype.changePenalty = function(penalty) {\n      this.penalty = penalty != null ? penalty : this.penalty;\n      return this;\n    };\n\n    Bottleneck.prototype.changeReservoir = function(reservoir) {\n      this.reservoir = reservoir;\n      while (this._tryToRun()) {}\n      return this;\n    };\n\n    Bottleneck.prototype.incrementReservoir = function(incr) {\n      if (incr == null) {\n        incr = 0;\n      }\n      this.changeReservoir(this.reservoir + incr);\n      return this;\n    };\n\n    Bottleneck.prototype.on = function(name, cb) {\n      if (this.events[name] != null) {\n        this.events[name].push(cb);\n      } else {\n        this.events[name] = [cb];\n      }\n      return this;\n    };\n\n    Bottleneck.prototype.removeAllListeners = function(name) {\n      if (name == null) {\n        name = null;\n      }\n      if (name != null) {\n        delete this.events[name];\n      } else {\n        this.events = {};\n      }\n      return this;\n    };\n\n    Bottleneck.prototype.stopAll = function(interrupt) {\n      var j, job, k, keys, l, len, len1;\n      this.interrupt = interrupt != null ? interrupt : this.interrupt;\n      keys = Object.keys(this._running);\n      for (j = 0, len = keys.length; j < len; j++) {\n        k = keys[j];\n        clearTimeout(this._running[k].timeout);\n      }\n      this._tryToRun = function() {};\n      this.check = function() {\n        return false;\n      };\n      this.submit = this.submitPriority = function() {\n        var args, cb, l;\n        args = 2 <= arguments.length ? slice.call(arguments, 0, l = arguments.length - 1) : (l = 0, []), cb = arguments[l++];\n        return cb(new Error(\"This limiter is stopped\"));\n      };\n      this.schedule = this.schedulePriority = function() {\n        return Promise.reject(new Error(\"This limiter is stopped\"));\n      };\n      if (this.interrupt) {\n        for (l = 0, len1 = keys.length; l < len1; l++) {\n          k = keys[l];\n          this._trigger(\"dropped\", [this._running[k].job]);\n        }\n      }\n      while (job = (this._getFirst(this._queues)).shift()) {\n        this._trigger(\"dropped\", [job]);\n      }\n      this._trigger(\"empty\", []);\n      if (this.nbRunning() === 0) {\n        this._trigger(\"idle\", []);\n      }\n      return this;\n    };\n\n    return Bottleneck;\n\n  })();\n\n  module.exports = Bottleneck;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-bottleneck/node_modules/bottleneck/lib/Cluster.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var Cluster,\n    hasProp = {}.hasOwnProperty;\n\n  Cluster = (function() {\n    function Cluster(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb;\n      this.minTime = minTime;\n      this.highWater = highWater;\n      this.strategy = strategy;\n      this.rejectOnDrop = rejectOnDrop;\n      this.limiters = {};\n      this.Bottleneck = require(\"./Bottleneck\");\n      this.startAutoCleanup();\n    }\n\n    Cluster.prototype.key = function(key) {\n      var ref;\n      if (key == null) {\n        key = \"\";\n      }\n      return (ref = this.limiters[key]) != null ? ref : (this.limiters[key] = new this.Bottleneck(this.maxNb, this.minTime, this.highWater, this.strategy, this.rejectOnDrop));\n    };\n\n    Cluster.prototype.deleteKey = function(key) {\n      if (key == null) {\n        key = \"\";\n      }\n      return delete this.limiters[key];\n    };\n\n    Cluster.prototype.all = function(cb) {\n      var k, ref, results, v;\n      ref = this.limiters;\n      results = [];\n      for (k in ref) {\n        if (!hasProp.call(ref, k)) continue;\n        v = ref[k];\n        results.push(cb(v));\n      }\n      return results;\n    };\n\n    Cluster.prototype.keys = function() {\n      return Object.keys(this.limiters);\n    };\n\n    Cluster.prototype.startAutoCleanup = function() {\n      var base;\n      this.stopAutoCleanup();\n      return typeof (base = (this.interval = setInterval((function(_this) {\n        return function() {\n          var k, ref, results, time, v;\n          time = Date.now();\n          ref = _this.limiters;\n          results = [];\n          for (k in ref) {\n            v = ref[k];\n            if ((v._nextRequest + (1000 * 60 * 5)) < time) {\n              results.push(_this.deleteKey(k));\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        };\n      })(this), 1000 * 30))).unref === \"function\" ? base.unref() : void 0;\n    };\n\n    Cluster.prototype.stopAutoCleanup = function() {\n      return clearInterval(this.interval);\n    };\n\n    return Cluster;\n\n  })();\n\n  module.exports = Cluster;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-bottleneck/node_modules/bottleneck/lib/DLList.js":"// Generated by CoffeeScript 1.11.0\n(function() {\n  var DLList;\n\n  DLList = (function() {\n    function DLList() {\n      this._first = null;\n      this._last = null;\n      this.length = 0;\n    }\n\n    DLList.prototype.push = function(value) {\n      var node;\n      this.length++;\n      node = {\n        value: value,\n        next: null\n      };\n      if (this._last != null) {\n        this._last.next = node;\n        this._last = node;\n      } else {\n        this._first = this._last = node;\n      }\n      return void 0;\n    };\n\n    DLList.prototype.shift = function() {\n      var ref1, value;\n      if (this._first == null) {\n        return void 0;\n      } else {\n        this.length--;\n      }\n      value = this._first.value;\n      this._first = (ref1 = this._first.next) != null ? ref1 : (this._last = null);\n      return value;\n    };\n\n    DLList.prototype.getArray = function() {\n      var node, ref, results;\n      node = this._first;\n      results = [];\n      while (node != null) {\n        results.push((ref = node, node = node.next, ref.value));\n      }\n      return results;\n    };\n\n    return DLList;\n\n  })();\n\n  module.exports = DLList;\n\n}).call(this);\n","/home/travis/build/npmtest/node-npmtest-bottleneck/node_modules/bottleneck/bottleneck.js":"(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Generated by CoffeeScript 1.11.0\n(function() {\n  var Bottleneck, MIDDLE_PRIORITY, NB_PRIORITIES,\n    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n    slice = [].slice;\n\n  NB_PRIORITIES = 10;\n\n  MIDDLE_PRIORITY = 5;\n\n  Bottleneck = (function() {\n    var e;\n\n    Bottleneck.strategy = Bottleneck.prototype.strategy = {\n      LEAK: 1,\n      OVERFLOW: 2,\n      OVERFLOW_PRIORITY: 4,\n      BLOCK: 3\n    };\n\n    Bottleneck.Cluster = Bottleneck.prototype.Cluster = require(\"./Cluster\");\n\n    Bottleneck.DLList = Bottleneck.prototype.DLList = require(\"./DLList\");\n\n    Bottleneck.Promise = Bottleneck.prototype.Promise = (function() {\n      try {\n        return require(\"bluebird\");\n      } catch (error) {\n        e = error;\n        return typeof Promise !== \"undefined\" && Promise !== null ? Promise : function() {\n          throw new Error(\"Bottleneck: install 'bluebird' or use Node 0.12 or higher for Promise support\");\n        };\n      }\n    })();\n\n    function Bottleneck(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb != null ? maxNb : 0;\n      this.minTime = minTime != null ? minTime : 0;\n      this.highWater = highWater != null ? highWater : -1;\n      this.strategy = strategy != null ? strategy : Bottleneck.prototype.strategy.LEAK;\n      this.rejectOnDrop = rejectOnDrop != null ? rejectOnDrop : false;\n      this.schedulePriority = bind(this.schedulePriority, this);\n      this.submitPriority = bind(this.submitPriority, this);\n      this.submit = bind(this.submit, this);\n      this._nextRequest = Date.now();\n      this._nbRunning = 0;\n      this._queues = this._makeQueues();\n      this._running = {};\n      this._nextIndex = 0;\n      this._unblockTime = 0;\n      this.penalty = (15 * this.minTime) || 5000;\n      this.interrupt = false;\n      this.reservoir = null;\n      this.limiter = null;\n      this.events = {};\n    }\n\n    Bottleneck.prototype._trigger = function(name, args) {\n      if (this.rejectOnDrop && name === \"dropped\") {\n        args[0].cb.apply({}, [new Error(\"This job has been dropped by Bottleneck\")]);\n      }\n      return setTimeout(((function(_this) {\n        return function() {\n          var ref;\n          return (ref = _this.events[name]) != null ? ref.forEach(function(e) {\n            return e.apply({}, args);\n          }) : void 0;\n        };\n      })(this)), 0);\n    };\n\n    Bottleneck.prototype._makeQueues = function() {\n      var i, j, ref, results;\n      results = [];\n      for (i = j = 1, ref = NB_PRIORITIES; 1 <= ref ? j <= ref : j >= ref; i = 1 <= ref ? ++j : --j) {\n        results.push(new Bottleneck.prototype.DLList());\n      }\n      return results;\n    };\n\n    Bottleneck.prototype.chain = function(limiter) {\n      this.limiter = limiter;\n      return this;\n    };\n\n    Bottleneck.prototype.isBlocked = function() {\n      return this._unblockTime >= Date.now();\n    };\n\n    Bottleneck.prototype._sanitizePriority = function(priority) {\n      var sProperty;\n      sProperty = ~~priority !== priority ? MIDDLE_PRIORITY : priority;\n      if (sProperty < 0) {\n        return 0;\n      } else if (sProperty > NB_PRIORITIES - 1) {\n        return NB_PRIORITIES - 1;\n      } else {\n        return sProperty;\n      }\n    };\n\n    Bottleneck.prototype._find = function(arr, fn) {\n      var i, j, len, x;\n      for (i = j = 0, len = arr.length; j < len; i = ++j) {\n        x = arr[i];\n        if (fn(x)) {\n          return x;\n        }\n      }\n      return [];\n    };\n\n    Bottleneck.prototype.nbQueued = function(priority) {\n      if (priority != null) {\n        return this._queues[this._sanitizePriority(priority)].length;\n      } else {\n        return this._queues.reduce((function(a, b) {\n          return a + b.length;\n        }), 0);\n      }\n    };\n\n    Bottleneck.prototype.nbRunning = function() {\n      return this._nbRunning;\n    };\n\n    Bottleneck.prototype._getFirst = function(arr) {\n      return this._find(arr, function(x) {\n        return x.length > 0;\n      });\n    };\n\n    Bottleneck.prototype._conditionsCheck = function() {\n      return (this.nbRunning() < this.maxNb || this.maxNb <= 0) && ((this.reservoir == null) || this.reservoir > 0);\n    };\n\n    Bottleneck.prototype.check = function() {\n      return this._conditionsCheck() && (this._nextRequest - Date.now()) <= 0;\n    };\n\n    Bottleneck.prototype._tryToRun = function() {\n      var done, index, next, queued, wait;\n      if (this._conditionsCheck() && (queued = this.nbQueued()) > 0) {\n        this._nbRunning++;\n        if (this.reservoir != null) {\n          this.reservoir--;\n        }\n        wait = Math.max(this._nextRequest - Date.now(), 0);\n        this._nextRequest = Date.now() + wait + this.minTime;\n        next = (this._getFirst(this._queues)).shift();\n        if (queued === 1) {\n          this._trigger(\"empty\", []);\n        }\n        done = false;\n        index = this._nextIndex++;\n        this._running[index] = {\n          timeout: setTimeout((function(_this) {\n            return function() {\n              var completed;\n              completed = function() {\n                var ref;\n                if (!done) {\n                  done = true;\n                  delete _this._running[index];\n                  _this._nbRunning--;\n                  _this._tryToRun();\n                  if (_this.nbRunning() === 0 && _this.nbQueued() === 0) {\n                    _this._trigger(\"idle\", []);\n                  }\n                  if (!_this.interrupt) {\n                    return (ref = next.cb) != null ? ref.apply({}, Array.prototype.slice.call(arguments, 0)) : void 0;\n                  }\n                }\n              };\n              if (_this.limiter != null) {\n                return _this.limiter.submit.apply(_this.limiter, Array.prototype.concat(next.task, next.args, completed));\n              } else {\n                return next.task.apply({}, next.args.concat(completed));\n              }\n            };\n          })(this), wait),\n          job: next\n        };\n        return true;\n      } else {\n        return false;\n      }\n    };\n\n    Bottleneck.prototype.submit = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return this.submitPriority.apply({}, Array.prototype.concat(MIDDLE_PRIORITY, args));\n    };\n\n    Bottleneck.prototype.submitPriority = function() {\n      var args, cb, j, job, priority, reachedHighWaterMark, shifted, task;\n      priority = arguments[0], task = arguments[1], args = 4 <= arguments.length ? slice.call(arguments, 2, j = arguments.length - 1) : (j = 2, []), cb = arguments[j++];\n      job = {\n        task: task,\n        args: args,\n        cb: cb\n      };\n      priority = this._sanitizePriority(priority);\n      reachedHighWaterMark = this.highWater >= 0 && this.nbQueued() === this.highWater && !this.check();\n      if (this.strategy === Bottleneck.prototype.strategy.BLOCK && (reachedHighWaterMark || this.isBlocked())) {\n        this._unblockTime = Date.now() + this.penalty;\n        this._nextRequest = this._unblockTime + this.minTime;\n        this._queues = this._makeQueues();\n        this._trigger(\"dropped\", [job]);\n        return true;\n      } else if (reachedHighWaterMark) {\n        shifted = this.strategy === Bottleneck.prototype.strategy.LEAK ? (this._getFirst(this._queues.slice(priority).reverse())).shift() : this.strategy === Bottleneck.prototype.strategy.OVERFLOW_PRIORITY ? (this._getFirst(this._queues.slice(priority + 1).reverse())).shift() : this.strategy === Bottleneck.prototype.strategy.OVERFLOW ? job : void 0;\n        if (shifted != null) {\n          this._trigger(\"dropped\", [shifted]);\n        }\n        if ((shifted == null) || this.strategy === Bottleneck.prototype.strategy.OVERFLOW) {\n          return reachedHighWaterMark;\n        }\n      }\n      this._queues[priority].push(job);\n      this._tryToRun();\n      return reachedHighWaterMark;\n    };\n\n    Bottleneck.prototype.schedule = function() {\n      var args;\n      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n      return this.schedulePriority.apply({}, Array.prototype.concat(MIDDLE_PRIORITY, args));\n    };\n\n    Bottleneck.prototype.schedulePriority = function() {\n      var args, priority, task, wrapped;\n      priority = arguments[0], task = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];\n      wrapped = function() {\n        var args, cb, j;\n        args = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), cb = arguments[j++];\n        return (task.apply({}, args)).then(function() {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return cb.apply({}, Array.prototype.concat(null, args));\n        })[\"catch\"](function() {\n          var args;\n          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n          return cb.apply({}, args);\n        });\n      };\n      return new Bottleneck.prototype.Promise((function(_this) {\n        return function(resolve, reject) {\n          return _this.submitPriority.apply({}, Array.prototype.concat(priority, wrapped, args, function() {\n            var args;\n            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n            return (args[0] != null ? reject : (args.shift(), resolve)).apply({}, args);\n          }));\n        };\n      })(this));\n    };\n\n    Bottleneck.prototype.changeSettings = function(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb != null ? maxNb : this.maxNb;\n      this.minTime = minTime != null ? minTime : this.minTime;\n      this.highWater = highWater != null ? highWater : this.highWater;\n      this.strategy = strategy != null ? strategy : this.strategy;\n      this.rejectOnDrop = rejectOnDrop != null ? rejectOnDrop : this.rejectOnDrop;\n      while (this._tryToRun()) {}\n      return this;\n    };\n\n    Bottleneck.prototype.changePenalty = function(penalty) {\n      this.penalty = penalty != null ? penalty : this.penalty;\n      return this;\n    };\n\n    Bottleneck.prototype.changeReservoir = function(reservoir) {\n      this.reservoir = reservoir;\n      while (this._tryToRun()) {}\n      return this;\n    };\n\n    Bottleneck.prototype.incrementReservoir = function(incr) {\n      if (incr == null) {\n        incr = 0;\n      }\n      this.changeReservoir(this.reservoir + incr);\n      return this;\n    };\n\n    Bottleneck.prototype.on = function(name, cb) {\n      if (this.events[name] != null) {\n        this.events[name].push(cb);\n      } else {\n        this.events[name] = [cb];\n      }\n      return this;\n    };\n\n    Bottleneck.prototype.removeAllListeners = function(name) {\n      if (name == null) {\n        name = null;\n      }\n      if (name != null) {\n        delete this.events[name];\n      } else {\n        this.events = {};\n      }\n      return this;\n    };\n\n    Bottleneck.prototype.stopAll = function(interrupt) {\n      var j, job, k, keys, l, len, len1;\n      this.interrupt = interrupt != null ? interrupt : this.interrupt;\n      keys = Object.keys(this._running);\n      for (j = 0, len = keys.length; j < len; j++) {\n        k = keys[j];\n        clearTimeout(this._running[k].timeout);\n      }\n      this._tryToRun = function() {};\n      this.check = function() {\n        return false;\n      };\n      this.submit = this.submitPriority = function() {\n        var args, cb, l;\n        args = 2 <= arguments.length ? slice.call(arguments, 0, l = arguments.length - 1) : (l = 0, []), cb = arguments[l++];\n        return cb(new Error(\"This limiter is stopped\"));\n      };\n      this.schedule = this.schedulePriority = function() {\n        return Promise.reject(new Error(\"This limiter is stopped\"));\n      };\n      if (this.interrupt) {\n        for (l = 0, len1 = keys.length; l < len1; l++) {\n          k = keys[l];\n          this._trigger(\"dropped\", [this._running[k].job]);\n        }\n      }\n      while (job = (this._getFirst(this._queues)).shift()) {\n        this._trigger(\"dropped\", [job]);\n      }\n      this._trigger(\"empty\", []);\n      if (this.nbRunning() === 0) {\n        this._trigger(\"idle\", []);\n      }\n      return this;\n    };\n\n    return Bottleneck;\n\n  })();\n\n  module.exports = Bottleneck;\n\n}).call(this);\n\n},{\"./Cluster\":2,\"./DLList\":3,\"bluebird\":undefined}],2:[function(require,module,exports){\n// Generated by CoffeeScript 1.11.0\n(function() {\n  var Cluster,\n    hasProp = {}.hasOwnProperty;\n\n  Cluster = (function() {\n    function Cluster(maxNb, minTime, highWater, strategy, rejectOnDrop) {\n      this.maxNb = maxNb;\n      this.minTime = minTime;\n      this.highWater = highWater;\n      this.strategy = strategy;\n      this.rejectOnDrop = rejectOnDrop;\n      this.limiters = {};\n      this.Bottleneck = require(\"./Bottleneck\");\n      this.startAutoCleanup();\n    }\n\n    Cluster.prototype.key = function(key) {\n      var ref;\n      if (key == null) {\n        key = \"\";\n      }\n      return (ref = this.limiters[key]) != null ? ref : (this.limiters[key] = new this.Bottleneck(this.maxNb, this.minTime, this.highWater, this.strategy, this.rejectOnDrop));\n    };\n\n    Cluster.prototype.deleteKey = function(key) {\n      if (key == null) {\n        key = \"\";\n      }\n      return delete this.limiters[key];\n    };\n\n    Cluster.prototype.all = function(cb) {\n      var k, ref, results, v;\n      ref = this.limiters;\n      results = [];\n      for (k in ref) {\n        if (!hasProp.call(ref, k)) continue;\n        v = ref[k];\n        results.push(cb(v));\n      }\n      return results;\n    };\n\n    Cluster.prototype.keys = function() {\n      return Object.keys(this.limiters);\n    };\n\n    Cluster.prototype.startAutoCleanup = function() {\n      var base;\n      this.stopAutoCleanup();\n      return typeof (base = (this.interval = setInterval((function(_this) {\n        return function() {\n          var k, ref, results, time, v;\n          time = Date.now();\n          ref = _this.limiters;\n          results = [];\n          for (k in ref) {\n            v = ref[k];\n            if ((v._nextRequest + (1000 * 60 * 5)) < time) {\n              results.push(_this.deleteKey(k));\n            } else {\n              results.push(void 0);\n            }\n          }\n          return results;\n        };\n      })(this), 1000 * 30))).unref === \"function\" ? base.unref() : void 0;\n    };\n\n    Cluster.prototype.stopAutoCleanup = function() {\n      return clearInterval(this.interval);\n    };\n\n    return Cluster;\n\n  })();\n\n  module.exports = Cluster;\n\n}).call(this);\n\n},{\"./Bottleneck\":1}],3:[function(require,module,exports){\n// Generated by CoffeeScript 1.11.0\n(function() {\n  var DLList;\n\n  DLList = (function() {\n    function DLList() {\n      this._first = null;\n      this._last = null;\n      this.length = 0;\n    }\n\n    DLList.prototype.push = function(value) {\n      var node;\n      this.length++;\n      node = {\n        value: value,\n        next: null\n      };\n      if (this._last != null) {\n        this._last.next = node;\n        this._last = node;\n      } else {\n        this._first = this._last = node;\n      }\n      return void 0;\n    };\n\n    DLList.prototype.shift = function() {\n      var ref1, value;\n      if (this._first == null) {\n        return void 0;\n      } else {\n        this.length--;\n      }\n      value = this._first.value;\n      this._first = (ref1 = this._first.next) != null ? ref1 : (this._last = null);\n      return value;\n    };\n\n    DLList.prototype.getArray = function() {\n      var node, ref, results;\n      node = this._first;\n      results = [];\n      while (node != null) {\n        results.push((ref = node, node = node.next, ref.value));\n      }\n      return results;\n    };\n\n    return DLList;\n\n  })();\n\n  module.exports = DLList;\n\n}).call(this);\n\n},{}],4:[function(require,module,exports){\n(function (global){\n// Generated by CoffeeScript 1.11.0\n(function() {\n  module.exports = require(\"./Bottleneck\");\n\n  if (global.window != null) {\n    global.window.Bottleneck = module.exports;\n  }\n\n}).call(this);\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"./Bottleneck\":1}]},{},[4]);\n"}